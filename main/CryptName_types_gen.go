package main

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type CryptNameType uint8

const (
	AesType CryptNameType = iota
	DesType
	Des3Type
	TeaType
	BlowfishType
	TwoFishType
	Rc4Type
	Rc2Type
	RsaType
	EccType
	DsaType
	PgpType
	Sm4Type
	Sm2Type
	HmacType
	HashAllType
	Base64Type
	Base32Type
	GzipType
	TrimSpaceType
	SwapType
	RequestHeaderType
	TimeStampType
)

func (t CryptNameType) Valid() bool {
	return t >= AesType && t <= TimeStampType
}

func CryptNameTypeBy[T stream.Integer](v T) CryptNameType {
	return CryptNameType(v)
}

func (t CryptNameType) AssertBy(name string) CryptNameType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t CryptNameType) String() string {
	switch t {
	case AesType:
		return "Aes"
	case DesType:
		return "Des"
	case Des3Type:
		return "Des3"
	case TeaType:
		return "Tea"
	case BlowfishType:
		return "Blowfish"
	case TwoFishType:
		return "TwoFish"
	case Rc4Type:
		return "Rc4"
	case Rc2Type:
		return "Rc2"
	case RsaType:
		return "Rsa"
	case EccType:
		return "Ecc"
	case DsaType:
		return "Dsa"
	case PgpType:
		return "Pgp"
	case Sm4Type:
		return "Sm4"
	case Sm2Type:
		return "Sm2"
	case HmacType:
		return "Hmac"
	case HashAllType:
		return "HashAll"
	case Base64Type:
		return "Base64"
	case Base32Type:
		return "Base32"
	case GzipType:
		return "Gzip"
	case TrimSpaceType:
		return "TrimSpace"
	case SwapType:
		return "Swap"
	case RequestHeaderType:
		return "RequestHeader"
	case TimeStampType:
		return "TimeStamp"
	default:
		panic("InvalidType")
	}
}

func (t CryptNameType) Tooltip() string {
	switch t {
	case AesType:
		return "Aes"
	case DesType:
		return "Des"
	case Des3Type:
		return "Des3"
	case TeaType:
		return "Tea"
	case BlowfishType:
		return "Blowfish"
	case TwoFishType:
		return "TwoFish"
	case Rc4Type:
		return "Rc4"
	case Rc2Type:
		return "Rc2"
	case RsaType:
		return "Rsa"
	case EccType:
		return "Ecc"
	case DsaType:
		return "Dsa"
	case PgpType:
		return "Pgp"
	case Sm4Type:
		return "Sm4"
	case Sm2Type:
		return "Sm2"
	case HmacType:
		return "Hmac"
	case HashAllType:
		return "HashAll"
	case Base64Type:
		return "Base64"
	case Base32Type:
		return "Base32"
	case GzipType:
		return "Gzip"
	case TrimSpaceType:
		return "TrimSpace"
	case SwapType:
		return "Swap"
	case RequestHeaderType:
		return "RequestHeader"
	case TimeStampType:
		return "TimeStamp"
	default:
		panic("InvalidType")
	}
}

func (t CryptNameType) Names() []string {
	return []string{
		"Aes",
		"Des",
		"Des3",
		"Tea",
		"Blowfish",
		"TwoFish",
		"Rc4",
		"Rc2",
		"Rsa",
		"Ecc",
		"Dsa",
		"Pgp",
		"Sm4",
		"Sm2",
		"Hmac",
		"HashAll",
		"Base64",
		"Base32",
		"Gzip",
		"TrimSpace",
		"Swap",
		"RequestHeader",
		"TimeStamp",
	}
}

func (t CryptNameType) EnumTypes() []CryptNameType {
	return []CryptNameType{
		AesType,
		DesType,
		Des3Type,
		TeaType,
		BlowfishType,
		TwoFishType,
		Rc4Type,
		Rc2Type,
		RsaType,
		EccType,
		DsaType,
		PgpType,
		Sm4Type,
		Sm2Type,
		HmacType,
		HashAllType,
		Base64Type,
		Base32Type,
		GzipType,
		TrimSpaceType,
		SwapType,
		RequestHeaderType,
		TimeStampType,
	}
}

func (t CryptNameType) SvgFileName() string {
	return t.String() + ".svg"
}
