package main

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type CryptType uint8

const (
	SymmetryType CryptType = iota
	AsymmetricalType
	HashType
	EncodingType
	ToolType
)

func (t CryptType) Valid() bool {
	return t >= SymmetryType && t <= ToolType
}

func CryptTypeBy[T stream.Integer](v T) CryptType {
	return CryptType(v)
}

func (t CryptType) AssertBy(name string) CryptType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t CryptType) String() string {
	switch t {
	case SymmetryType:
		return "Symmetry"
	case AsymmetricalType:
		return "Asymmetrical"
	case HashType:
		return "Hash"
	case EncodingType:
		return "Encoding"
	case ToolType:
		return "Tool"
	default:
		panic("InvalidType")
	}
}

func (t CryptType) Tooltip() string {
	switch t {
	case SymmetryType:
		return "Symmetry"
	case AsymmetricalType:
		return "Asymmetrical"
	case HashType:
		return "Hash"
	case EncodingType:
		return "Encoding"
	case ToolType:
		return "Tool"
	default:
		panic("InvalidType")
	}
}

func (t CryptType) Names() []string {
	return []string{
		"Symmetry",
		"Asymmetrical",
		"Hash",
		"Encoding",
		"Tool",
	}
}

func (t CryptType) EnumTypes() []CryptType {
	return []CryptType{
		SymmetryType,
		AsymmetricalType,
		HashType,
		EncodingType,
		ToolType,
	}
}

func (t CryptType) SvgFileName() string {
	return t.String() + ".svg"
}
