package main

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type CryptNameKind byte

const (
	AesKind CryptNameKind = iota
	DesKind
	Des3Kind
	TeaKind
	BlowfishKind
	TwoFishKind
	Rc4Kind
	Rc2Kind
	RsaKind
	EccKind
	DsaKind
	PgpKind
	Sm4Kind
	Sm2Kind
	HmacKind
	HashAllKind
	Base64Kind
	Base32Kind
	GzipKind
	TrimSpaceKind
	SwapKind
	RequestHeaderKind
	TimeStampKind
	InvalidCryptNameKind
)

func ConvertInteger2CryptNameKind[T constraints.Integer](v T) CryptNameKind {
	return CryptNameKind(v)
}

func (k CryptNameKind) AssertKind(kinds string) CryptNameKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidCryptNameKind
}

func (k CryptNameKind) String() string {
	switch k {
	case AesKind:
		return "Aes"
	case DesKind:
		return "Des"
	case Des3Kind:
		return "Des3"
	case TeaKind:
		return "Tea"
	case BlowfishKind:
		return "Blowfish"
	case TwoFishKind:
		return "TwoFish"
	case Rc4Kind:
		return "Rc4"
	case Rc2Kind:
		return "Rc2"
	case RsaKind:
		return "Rsa"
	case EccKind:
		return "Ecc"
	case DsaKind:
		return "Dsa"
	case PgpKind:
		return "Pgp"
	case Sm4Kind:
		return "Sm4"
	case Sm2Kind:
		return "Sm2"
	case HmacKind:
		return "Hmac"
	case HashAllKind:
		return "HashAll"
	case Base64Kind:
		return "Base64"
	case Base32Kind:
		return "Base32"
	case GzipKind:
		return "Gzip"
	case TrimSpaceKind:
		return "TrimSpace"
	case SwapKind:
		return "Swap"
	case RequestHeaderKind:
		return "RequestHeader"
	case TimeStampKind:
		return "TimeStamp"
	default:
		return "InvalidCryptNameKind"
	}
}

func (k CryptNameKind) Keys() []string {
	return []string{
		"Aes",
		"Des",
		"Des3",
		"Tea",
		"Blowfish",
		"TwoFish",
		"Rc4",
		"Rc2",
		"Rsa",
		"Ecc",
		"Dsa",
		"Pgp",
		"Sm4",
		"Sm2",
		"Hmac",
		"HashAll",
		"Base64",
		"Base32",
		"Gzip",
		"TrimSpace",
		"Swap",
		"RequestHeader",
		"TimeStamp",
	}
}

func (k CryptNameKind) Kinds() []CryptNameKind {
	return []CryptNameKind{
		AesKind,
		DesKind,
		Des3Kind,
		TeaKind,
		BlowfishKind,
		TwoFishKind,
		Rc4Kind,
		Rc2Kind,
		RsaKind,
		EccKind,
		DsaKind,
		PgpKind,
		Sm4Kind,
		Sm2Kind,
		HmacKind,
		HashAllKind,
		Base64Kind,
		Base32Kind,
		GzipKind,
		TrimSpaceKind,
		SwapKind,
		RequestHeaderKind,
		TimeStampKind,
	}
}

func (k CryptNameKind) SvgFileName() string {
	switch k {
	case AesKind:
		return "Aes"
	case DesKind:
		return "Des"
	case Des3Kind:
		return "Des3"
	case TeaKind:
		return "Tea"
	case BlowfishKind:
		return "Blowfish"
	case TwoFishKind:
		return "TwoFish"
	case Rc4Kind:
		return "Rc4"
	case Rc2Kind:
		return "Rc2"
	case RsaKind:
		return "Rsa"
	case EccKind:
		return "Ecc"
	case DsaKind:
		return "Dsa"
	case PgpKind:
		return "Pgp"
	case Sm4Kind:
		return "Sm4"
	case Sm2Kind:
		return "Sm2"
	case HmacKind:
		return "Hmac"
	case HashAllKind:
		return "HashAll"
	case Base64Kind:
		return "Base64"
	case Base32Kind:
		return "Base32"
	case GzipKind:
		return "Gzip"
	case TrimSpaceKind:
		return "TrimSpace"
	case SwapKind:
		return "Swap"
	case RequestHeaderKind:
		return "RequestHeader"
	case TimeStampKind:
		return "TimeStamp"
	default:
		return "InvalidCryptNameKind"
	}
}
